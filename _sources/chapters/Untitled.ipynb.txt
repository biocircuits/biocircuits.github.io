{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "35bf8160-8dbb-474e-8acd-35458e5edc41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1253\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!Object.prototype.hasOwnProperty.call(output.data, EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1253\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error(url) {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (let i = 0; i < css_urls.length; i++) {\n",
       "      const url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error.bind(null, url);\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.3.1.min.js\": \"YF85VygJKMVnHE+lLv2AM93Vbstr0yo2TbIu5v8se5Rq3UQAUmcuh4aaJwNlpKwa\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.1.min.js\": \"KKuas3gevv3PvrlkyCMzffFeaMq5we/a2QsP5AUoS3mJ0jmaCL7jirFJN3GoE/lM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.1.min.js\": \"MK/uFc3YT18pkvvXRl66tTHjP0/dxoSH2e/eiNMFIguKlun2+WVqaPTWmUy/zvh4\"};\n",
       "\n",
       "    for (let i = 0; i < js_urls.length; i++) {\n",
       "      const url = js_urls[i];\n",
       "      const element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error.bind(null, url);\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      if (url in hashes) {\n",
       "        element.crossOrigin = \"anonymous\";\n",
       "        element.integrity = \"sha384-\" + hashes[url];\n",
       "      }\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.3.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.1.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1253\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1253\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error(url) {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (let i = 0; i < css_urls.length; i++) {\n      const url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error.bind(null, url);\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.3.1.min.js\": \"YF85VygJKMVnHE+lLv2AM93Vbstr0yo2TbIu5v8se5Rq3UQAUmcuh4aaJwNlpKwa\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.1.min.js\": \"KKuas3gevv3PvrlkyCMzffFeaMq5we/a2QsP5AUoS3mJ0jmaCL7jirFJN3GoE/lM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.1.min.js\": \"MK/uFc3YT18pkvvXRl66tTHjP0/dxoSH2e/eiNMFIguKlun2+WVqaPTWmUy/zvh4\"};\n\n    for (let i = 0; i < js_urls.length; i++) {\n      const url = js_urls[i];\n      const element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error.bind(null, url);\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.3.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.1.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1253\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Colab setup ------------------\n",
    "import os, sys, subprocess\n",
    "if \"google.colab\" in sys.modules:\n",
    "    cmd = \"pip install --upgrade colorcet watermark\"\n",
    "    process = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
    "    stdout, stderr = process.communicate()\n",
    "# ------------------------------\n",
    "\n",
    "import numpy as np\n",
    "import scipy.integrate\n",
    "import scipy.optimize\n",
    "\n",
    "import bokeh.plotting\n",
    "import bokeh.io\n",
    "\n",
    "import colorcet\n",
    "\n",
    "# We will use Matplotlib to make a 3D plot\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = \"retina\"\n",
    "\n",
    "# Set to True to have access to fully interactive plots\n",
    "fully_interactive_plots = False\n",
    "notebook_url = \"localhost:8888\"\n",
    "\n",
    "bokeh.io.output_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1953c0fd-a454-4dcb-ad68-c5af09fa6b46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"c1a9b5f0-92b7-45bf-a532-e3cc29478db3\" data-root-id=\"1383\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"f9903392-08e4-4714-97f6-c1abb0f5467e\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"children\":[{\"id\":\"1257\"},{\"id\":\"1377\"},{\"id\":\"1382\"}]},\"id\":\"1383\",\"type\":\"Column\"},{\"attributes\":{\"height\":10},\"id\":\"1377\",\"type\":\"Spacer\"},{\"attributes\":{},\"id\":\"1303\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1304\",\"type\":\"Selection\"},{\"attributes\":{\"source\":{\"id\":\"1288\"}},\"id\":\"1311\",\"type\":\"CDSView\"},{\"attributes\":{\"data_source\":{\"id\":\"1288\"},\"glyph\":{\"id\":\"1308\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1309\"},\"view\":{\"id\":\"1311\"}},\"id\":\"1310\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"x1\"},\"y\":{\"field\":\"x2\"}},\"id\":\"1373\",\"type\":\"Line\"},{\"attributes\":{\"axis\":{\"id\":\"1266\"},\"ticker\":null},\"id\":\"1269\",\"type\":\"Grid\"},{\"attributes\":{\"end\":40},\"id\":\"1258\",\"type\":\"Range1d\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#ff7e0e\",\"line_width\":2,\"x\":{\"field\":\"t\"},\"y\":{\"field\":\"x2\"}},\"id\":\"1309\",\"type\":\"Line\"},{\"attributes\":{\"width\":70},\"id\":\"1378\",\"type\":\"Spacer\"},{\"attributes\":{\"below\":[{\"id\":\"1266\"}],\"center\":[{\"id\":\"1269\"},{\"id\":\"1273\"},{\"id\":\"1305\"}],\"frame_height\":200,\"frame_width\":550,\"left\":[{\"id\":\"1270\"}],\"renderers\":[{\"id\":\"1292\"},{\"id\":\"1310\"},{\"id\":\"1327\"}],\"title\":{\"id\":\"1294\"},\"toolbar\":{\"id\":\"1281\"},\"x_range\":{\"id\":\"1258\"},\"x_scale\":{\"id\":\"1262\"},\"y_range\":{\"id\":\"1260\"},\"y_scale\":{\"id\":\"1264\"}},\"id\":\"1257\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"line_color\":\"#ff7e0e\",\"line_width\":2,\"x\":{\"field\":\"t\"},\"y\":{\"field\":\"x2\"}},\"id\":\"1308\",\"type\":\"Line\"},{\"attributes\":{\"children\":[{\"id\":\"1254\"},{\"id\":\"1255\"},{\"id\":\"1256\"}],\"width\":150},\"id\":\"1379\",\"type\":\"Column\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#2ba02b\",\"line_width\":2,\"x\":{\"field\":\"t\"},\"y\":{\"field\":\"x3\"}},\"id\":\"1326\",\"type\":\"Line\"},{\"attributes\":{\"below\":[{\"id\":\"1350\"}],\"center\":[{\"id\":\"1353\"},{\"id\":\"1357\"}],\"frame_height\":200,\"frame_width\":200,\"left\":[{\"id\":\"1354\"}],\"renderers\":[{\"id\":\"1375\"}],\"title\":{\"id\":\"1412\"},\"toolbar\":{\"id\":\"1365\"},\"x_range\":{\"id\":\"1342\"},\"x_scale\":{\"id\":\"1346\"},\"y_range\":{\"id\":\"1344\"},\"y_scale\":{\"id\":\"1348\"}},\"id\":\"1341\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1262\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1264\",\"type\":\"LinearScale\"},{\"attributes\":{\"line_color\":\"#2ba02b\",\"line_width\":2,\"x\":{\"field\":\"t\"},\"y\":{\"field\":\"x3\"}},\"id\":\"1325\",\"type\":\"Line\"},{\"attributes\":{\"axis_label\":\"t\",\"formatter\":{\"id\":\"1297\"},\"major_label_policy\":{\"id\":\"1296\"},\"ticker\":{\"id\":\"1267\"}},\"id\":\"1266\",\"type\":\"LinearAxis\"},{\"attributes\":{\"data\":{\"t\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]},\"x1\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]},\"x2\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]},\"x3\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]}},\"selected\":{\"id\":\"1304\"},\"selection_policy\":{\"id\":\"1303\"}},\"id\":\"1288\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"source\":{\"id\":\"1288\"}},\"id\":\"1328\",\"type\":\"CDSView\"},{\"attributes\":{\"label\":{\"value\":\"x\\u2083\"},\"renderers\":[{\"id\":\"1327\"}]},\"id\":\"1340\",\"type\":\"LegendItem\"},{\"attributes\":{},\"id\":\"1267\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1260\",\"type\":\"DataRange1d\"},{\"attributes\":{\"label\":{\"value\":\"x\\u2082\"},\"renderers\":[{\"id\":\"1310\"}]},\"id\":\"1323\",\"type\":\"LegendItem\"},{\"attributes\":{\"disabled\":true,\"end\":5,\"start\":1,\"step\":0.1,\"title\":\"n\",\"value\":3},\"id\":\"1255\",\"type\":\"Slider\"},{\"attributes\":{\"data_source\":{\"id\":\"1288\"},\"glyph\":{\"id\":\"1373\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1374\"},\"view\":{\"id\":\"1376\"}},\"id\":\"1375\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"data_source\":{\"id\":\"1288\"},\"glyph\":{\"id\":\"1325\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1326\"},\"view\":{\"id\":\"1328\"}},\"id\":\"1327\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1280\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1342\",\"type\":\"DataRange1d\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"x1\"},\"y\":{\"field\":\"x2\"}},\"id\":\"1374\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1300\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"axis_label\":\"x\\u2081\",\"formatter\":{\"id\":\"1418\"},\"major_label_policy\":{\"id\":\"1417\"},\"ticker\":{\"id\":\"1351\"}},\"id\":\"1350\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1346\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1344\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1362\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"1348\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1417\",\"type\":\"AllLabels\"},{\"attributes\":{\"source\":{\"id\":\"1288\"}},\"id\":\"1376\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1351\",\"type\":\"BasicTicker\"},{\"attributes\":{\"axis\":{\"id\":\"1350\"},\"ticker\":null},\"id\":\"1353\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1359\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"axis_label\":\"x\\u2082\",\"formatter\":{\"id\":\"1421\"},\"major_label_policy\":{\"id\":\"1420\"},\"ticker\":{\"id\":\"1355\"}},\"id\":\"1354\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1418\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"axis\":{\"id\":\"1354\"},\"dimension\":1,\"ticker\":null},\"id\":\"1357\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1355\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1420\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1363\",\"type\":\"HelpTool\"},{\"attributes\":{\"overlay\":{\"id\":\"1364\"}},\"id\":\"1360\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1358\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1421\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1361\",\"type\":\"SaveTool\"},{\"attributes\":{\"children\":[{\"id\":\"1341\"},{\"id\":\"1378\"},{\"id\":\"1381\"}]},\"id\":\"1382\",\"type\":\"Row\"},{\"attributes\":{},\"id\":\"1299\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1277\",\"type\":\"SaveTool\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"1274\"},{\"id\":\"1275\"},{\"id\":\"1276\"},{\"id\":\"1277\"},{\"id\":\"1278\"},{\"id\":\"1279\"}]},\"id\":\"1281\",\"type\":\"Toolbar\"},{\"attributes\":{\"source\":{\"id\":\"1288\"}},\"id\":\"1293\",\"type\":\"CDSView\"},{\"attributes\":{\"line_color\":\"#1f77b3\",\"line_width\":2,\"x\":{\"field\":\"t\"},\"y\":{\"field\":\"x1\"}},\"id\":\"1290\",\"type\":\"Line\"},{\"attributes\":{\"items\":[{\"id\":\"1306\"},{\"id\":\"1323\"},{\"id\":\"1340\"}],\"location\":\"top_left\"},\"id\":\"1305\",\"type\":\"Legend\"},{\"attributes\":{\"children\":[{\"id\":\"1379\"},{\"id\":\"1380\"}]},\"id\":\"1381\",\"type\":\"Column\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b3\",\"line_width\":2,\"x\":{\"field\":\"t\"},\"y\":{\"field\":\"x1\"}},\"id\":\"1291\",\"type\":\"Line\"},{\"attributes\":{\"label\":{\"value\":\"x\\u2081\"},\"renderers\":[{\"id\":\"1292\"}]},\"id\":\"1306\",\"type\":\"LegendItem\"},{\"attributes\":{},\"id\":\"1294\",\"type\":\"Title\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1364\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1296\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1297\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"overlay\":{\"id\":\"1280\"}},\"id\":\"1276\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1278\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"1274\",\"type\":\"PanTool\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"1358\"},{\"id\":\"1359\"},{\"id\":\"1360\"},{\"id\":\"1361\"},{\"id\":\"1362\"},{\"id\":\"1363\"}]},\"id\":\"1365\",\"type\":\"Toolbar\"},{\"attributes\":{\"formatter\":{\"id\":\"1300\"},\"major_label_policy\":{\"id\":\"1299\"},\"ticker\":{\"id\":\"1271\"}},\"id\":\"1270\",\"type\":\"LinearAxis\"},{\"attributes\":{\"disabled\":true,\"end\":100,\"start\":0,\"step\":0.1,\"title\":\"\\u03b2\",\"value\":10},\"id\":\"1254\",\"type\":\"Slider\"},{\"attributes\":{\"axis\":{\"id\":\"1270\"},\"dimension\":1,\"ticker\":null},\"id\":\"1273\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1271\",\"type\":\"BasicTicker\"},{\"attributes\":{\"text\":\"\\n<p>Sliders are inactive. To get active sliders, re-run notebook with\\n<font style=\\\"font-family:monospace;\\\">fully_interactive_plots = True</font>\\nin the first code cell.</p>\\n        \",\"width\":250},\"id\":\"1380\",\"type\":\"Div\"},{\"attributes\":{},\"id\":\"1412\",\"type\":\"Title\"},{\"attributes\":{\"disabled\":true,\"end\":100,\"start\":1,\"title\":\"t_max\",\"value\":40},\"id\":\"1256\",\"type\":\"Slider\"},{\"attributes\":{},\"id\":\"1279\",\"type\":\"HelpTool\"},{\"attributes\":{},\"id\":\"1275\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"data_source\":{\"id\":\"1288\"},\"glyph\":{\"id\":\"1290\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1291\"},\"view\":{\"id\":\"1293\"}},\"id\":\"1292\",\"type\":\"GlyphRenderer\"}],\"root_ids\":[\"1383\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.1\"}};\n",
       "  var render_items = [{\"docid\":\"f9903392-08e4-4714-97f6-c1abb0f5467e\",\"root_ids\":[\"1383\"],\"roots\":{\"1383\":\"c1a9b5f0-92b7-45bf-a532-e3cc29478db3\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1383"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def repressilator_rhs(x, t, beta, n):\n",
    "    \"\"\"\n",
    "    Returns 3-array of (dx_1/dt, dx_2/dt, dx_3/dt)\n",
    "    \"\"\"\n",
    "    x_1, x_2, x_3 = x\n",
    "\n",
    "    return np.array(\n",
    "        [\n",
    "            beta / (1 + x_3 ** n) - x_1,\n",
    "            beta / (1 + x_1 ** n) - x_2,\n",
    "            beta / (1 + x_2 ** n) - x_3,\n",
    "        ]\n",
    "    )\n",
    "\n",
    "\n",
    "# Initial condiations\n",
    "x0 = np.array([1, 1, 1.2])\n",
    "\n",
    "# Number of points to use in plots\n",
    "n_points = 1000\n",
    "\n",
    "# Widgets for controlling parameters\n",
    "beta_slider = bokeh.models.Slider(title=\"β\", start=0, end=100, step=0.1, value=10)\n",
    "n_slider = bokeh.models.Slider(title=\"n\", start=1, end=5, step=0.1, value=3)\n",
    "t_max_slider = bokeh.models.Slider(title=\"t_max\", start=1, end=100, step=1, value=40)\n",
    "\n",
    "# Solve for species concentrations\n",
    "def _solve_repressilator(beta, n, t_max):\n",
    "    t = np.linspace(0, t_max, n_points)\n",
    "    x = scipy.integrate.odeint(repressilator_rhs, x0, t, args=(beta, n))\n",
    "\n",
    "    return t, x.transpose()\n",
    "\n",
    "\n",
    "# Obtain solution for plot\n",
    "t, x = _solve_repressilator(beta_slider.value, n_slider.value, t_max_slider.value)\n",
    "\n",
    "# Build the plot\n",
    "colors = colorcet.b_glasbey_category10[:3]\n",
    "\n",
    "p_rep = bokeh.plotting.figure(\n",
    "    frame_width=550, frame_height=200, x_axis_label=\"t\", x_range=[0, t_max_slider.value]\n",
    ")\n",
    "\n",
    "cds = bokeh.models.ColumnDataSource(data=dict(t=t, x1=x[0], x2=x[1], x3=x[2]))\n",
    "labels = dict(x1=\"x₁\", x2=\"x₂\", x3=\"x₃\")\n",
    "for color, x_val in zip(colors, labels):\n",
    "    p_rep.line(\n",
    "        source=cds,\n",
    "        x=\"t\",\n",
    "        y=x_val,\n",
    "        color=color,\n",
    "        legend_label=labels[x_val],\n",
    "        line_width=2,\n",
    "    )\n",
    "\n",
    "p_rep.legend.location = \"top_left\"\n",
    "\n",
    "\n",
    "# Set up plot\n",
    "p_phase = bokeh.plotting.figure(\n",
    "    frame_width=200, frame_height=200, x_axis_label=\"x₁\", y_axis_label=\"x₂\",\n",
    ")\n",
    "\n",
    "p_phase.line(source=cds, x=\"x1\", y=\"x2\", line_width=2)\n",
    "\n",
    "\n",
    "if fully_interactive_plots:\n",
    "    # Set up callbacks\n",
    "    def _callback(attr, old, new):\n",
    "        t, x = _solve_repressilator(\n",
    "            beta_slider.value, n_slider.value, t_max_slider.value\n",
    "        )\n",
    "        cds.data = dict(t=t, x1=x[0], x2=x[1], x3=x[2])\n",
    "        p_rep.x_range.end = t_max_slider.value\n",
    "\n",
    "    beta_slider.on_change(\"value\", _callback)\n",
    "    n_slider.on_change(\"value\", _callback)\n",
    "    t_max_slider.on_change(\"value\", _callback)\n",
    "\n",
    "    # Build layout\n",
    "    repressilator_layout = bokeh.layouts.column(\n",
    "        p_rep,\n",
    "        bokeh.layouts.Spacer(height=10),\n",
    "        bokeh.layouts.row(\n",
    "            p_phase,\n",
    "            bokeh.layouts.Spacer(width=70),\n",
    "            bokeh.layouts.column(beta_slider, n_slider, t_max_slider, width=150),\n",
    "        ),\n",
    "    )\n",
    "\n",
    "    # Build the app\n",
    "    def repressilator_app(doc):\n",
    "        doc.add_root(repressilator_layout)\n",
    "\n",
    "    bokeh.io.show(repressilator_app, notebook_url=notebook_url)\n",
    "else:\n",
    "    beta_slider.disabled = True\n",
    "    n_slider.disabled = True\n",
    "    t_max_slider.disabled = True\n",
    "\n",
    "    # Build layout\n",
    "    repressilator_layout = bokeh.layouts.column(\n",
    "        p_rep,\n",
    "        bokeh.layouts.Spacer(height=10),\n",
    "        bokeh.layouts.row(\n",
    "            p_phase,\n",
    "            bokeh.layouts.Spacer(width=70),\n",
    "            bokeh.layouts.column(\n",
    "                bokeh.layouts.column(beta_slider, n_slider, t_max_slider, width=150),\n",
    "                bokeh.models.Div(\n",
    "                    text=\"\"\"\n",
    "<p>Sliders are inactive. To get active sliders, re-run notebook with\n",
    "<font style=\"font-family:monospace;\">fully_interactive_plots = True</font>\n",
    "in the first code cell.</p>\n",
    "        \"\"\",\n",
    "                    width=250,\n",
    "                ),\n",
    "            ),\n",
    "        ),\n",
    "    )\n",
    "\n",
    "    bokeh.io.show(repressilator_layout)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47bfb5df-88fa-4f3e-8376-913ffbfc5639",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
